{"version":3,"sources":["js/task-3.js"],"names":["delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";AAIA,MAAMA,EAAQC,GACHC,QAAQC,QAAQF,GAIrBG,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GAKjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,IAExB,IAAIZ,QAASC,IAIpBA,EAHqBU,EAASE,IAAIC,GAChCA,EAAKN,OAASI,EAAW,IAAKE,EAAML,QAASK,EAAKL,QAAWK,MAYnEJ,EAAgBH,EAAO,SAASD,KAAKF,QAAQW,OAC7CL,EAAgBH,EAAO,QAAQD,KAAKF,QAAQW,OAO5C,MAAMC,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAG9CK,EAAkBC,GACjB,IAAIvB,QAAS,CAACC,EAAQuB,KACrB1B,MAAAA,EAAQkB,EAA0B,IAAK,KAE7CS,WAAW,KACUN,KAAKE,SAAW,IAGjCpB,EAAQ,CAAEyB,GAAIH,EAAYG,GAAIvB,KAAML,IAEpC0B,EAAOD,EAAYG,KACpB5B,KAGD6B,EAAa,EAAGD,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1CyB,EAAWF,IACftB,QAAQyB,qCAAqCH,+BAQ/CJ,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH,GAChEN,EAAgB,CAAEI,GAAI,GAAII,OAAQ,MAAOxB,KAAKqB,GAAYI,MAAMH","file":"task-3.07f0d003.js","sourceRoot":"../src","sourcesContent":["\n// sub-task 1\n\n\nconst delay = ms => {\n    return Promise.resolve(ms);\n    // Change this function\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n// sub-task 2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username,) => {\n\n    return new Promise (resolve => {\n    const updatedUsers = allUsers.map(user =>\n      user.name === username ? { ...user, active: !user.active } : user\n    )\n    resolve (updatedUsers);\n  })\n};\n    \n\n// Currently the function works like this\n//toggleUserState(users, 'Mango', console.table);\n//toggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n\n// sub-task 3\n\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\n  const makeTransaction = transaction => { \n  return new Promise ((resolve,reject) => {\n    const delay = randomIntegerFromInterval(200, 500);\n  \n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: delay });\n      } \n        reject(transaction.id);\n    }, delay);\n  })};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\n//makeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\n//makeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);"]}