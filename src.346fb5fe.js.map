{"version":3,"sources":["js/task-1.js","js/task-3.js","index.js"],"names":["startBtn","document","querySelector","stopBtn","addEventListener","clickOnStart","clickOnStop","PROMT_DELAY","timeOutId","isActive","intervalId","setInterval","body","style","backgroundColor","getRandomHexColor","Math","floor","random","toString","clearInterval","delay","ms","Promise","resolve","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","username","callback","map","user","table","randomIntegerFromInterval","min","max","makeTransaction","transaction","onSuccess","onError","setTimeout","id","logSuccess","logError","warn","amount","catch"],"mappings":";;;AAAA,MAAMA,EAAWC,SAASC,cAAc,gBAClCC,EAAUF,SAASC,cAAc,eAGvCF,EAASI,iBAAiB,QAASC,GACnCF,EAAQC,iBAAiB,QAASE,GAElC,MAAMC,EAAc,IACpB,IAAIC,EAAY,KACZC,GAAW,EAEf,SAASJ,IACDI,IAGJA,GAAW,EACXC,WAAaC,YAAY,KACrBV,SAASW,KAAKC,MAAMC,gBAAkBC,KACvCR,IAKP,SAASQ,IACG,UAAGC,KAAKC,MAAsB,SAAhBD,KAAKE,UAAqBC,SAAS,MAI7D,SAASb,IACLc,cAAcV,YACdD,GAAW;;;;AC1Bf,MAAMY,EAAQC,GACHC,QAAQC,QAAQF,GAIrBG,EAASC,GAAQC,QAAQC,uBAAuBF,OAGtDL,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,KAAMQ,KAAKJ,GACjBJ,EAAM,MAAMQ,KAAKJ,GAKjB,MAAMK,EAAQ,CACV,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,IAGtBC,EAAkB,CAACC,EAAUC,EAAUC,KAKzCA,EAJqBF,EAASG,IAAIC,GAC9BA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,KAOrEL,EAAgBH,EAAO,QAASH,QAAQY,OACxCN,EAAgBH,EAAO,OAAQH,QAAQY,OAGvCN,EAAgBH,EAAO,SAASD,KAAKF,QAAQY,OAC7CN,EAAgBH,EAAO,QAAQD,KAAKF,QAAQY,OAO5C,MAAMC,EAA4B,CAACC,EAAKC,IAC7B1B,KAAKC,MAAMD,KAAKE,UAAYwB,EAAMD,EAAM,GAAKA,GAGlDE,EAAkB,CAACC,EAAaC,EAAWC,KACvCzB,MAAAA,EAAQmB,EAA0B,IAAK,KAE7CO,WAAW,KACY/B,KAAKE,SAAW,GAG/B2B,EAAU,CAAEG,GAAIJ,EAAYI,GAAItB,KAAML,IAEtCyB,EAAQF,EAAYI,KAEzB3B,IAGD4B,EAAa,EAAGD,GAAAA,EAAItB,KAAAA,MACtBC,QAAQC,mBAAmBoB,kBAAmBtB,QAG5CwB,EAAWF,IACbrB,QAAQwB,qCAAqCH,+BAIjDL,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GACrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,KAAOH,EAAYC,GAGrDP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH,GAChEP,EAAgB,CAAEK,GAAI,GAAII,OAAQ,MAAOvB,KAAKoB,GAAYI,MAAMH;;AC1EhE,aAJA,QAAA,oBAEA,QAAA,eACA,QAAA,eACA,QAAA","file":"src.346fb5fe.js","sourceRoot":"../src","sourcesContent":["const startBtn = document.querySelector('[data-start]');\nconst stopBtn = document.querySelector('[data-stop]');\n\n\nstartBtn.addEventListener('click', clickOnStart);\nstopBtn.addEventListener('click', clickOnStop);\n\nconst PROMT_DELAY = 1000\nlet timeOutId = null\nlet isActive = false;\n\nfunction clickOnStart() {\n    if (isActive) {\n        return;\n    }\n    isActive = true;\n    intervalId = setInterval(() => {\n        document.body.style.backgroundColor = getRandomHexColor();\n    }, PROMT_DELAY);\n};\n\n\n\nfunction getRandomHexColor() {\n    return `#${Math.floor(Math.random() * 16777215).toString(16)}`;\n}\n\n\nfunction clickOnStop() {\n    clearInterval(intervalId);\n    isActive = false;\n}\n\n","\n// sub-task 1\n\n\nconst delay = ms => {\n    return Promise.resolve(ms);\n    // Change this function\n};\n\nconst logger = time => console.log(`Fulfilled after ${time}ms`);\n\n// Tests\ndelay(2000).then(logger); // Fulfilled after 2000ms\ndelay(1000).then(logger); // Fulfilled after 1000ms\ndelay(1500).then(logger); // Fulfilled after 1500ms\n\n\n// sub-task 2\n\nconst users = [\n    { name: 'Mango', active: true },\n    { name: 'Poly', active: false },\n    { name: 'Ajax', active: false },\n];\n\nconst toggleUserState = (allUsers, username, callback) => {\n    const updatedUsers = allUsers.map(user =>\n        user.name === username ? { ...user, active: !user.active } : user\n    );\n\n    callback(updatedUsers);\n};\n\n// Currently the function works like this\ntoggleUserState(users, 'Mango', console.table);\ntoggleUserState(users, 'Ajax', console.table);\n\n// The function should work like this\ntoggleUserState(users, 'Mango').then(console.table);\ntoggleUserState(users, 'Ajax').then(console.table);\n\n\n\n// sub-task 3\n\n\nconst randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = (transaction, onSuccess, onError) => {\n    const delay = randomIntegerFromInterval(200, 500);\n\n    setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n\n        if (canProcess) {\n            onSuccess({ id: transaction.id, time: delay });\n        } else {\n            onError(transaction.id);\n        }\n    }, delay);\n};\n\nconst logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\n// Currently the function works like this\nmakeTransaction({ id: 70, amount: 150 }, logSuccess, logError);\nmakeTransaction({ id: 71, amount: 230 }, logSuccess, logError);\n\n// The function should work like this\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);","import './sass/main.scss';\n\nimport './js/task-1'\nimport './js/task-2'\nimport './js/task-3'"]}